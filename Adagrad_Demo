import matplotlib
import matplotlib.pyplot as plt
#matplotlib.use('Agg')
import  numpy as np
import csv

#数据
x_data=[338.,333.,328.,207.,226.,25.,179.,60.,208.,606.]
y_data=[640.,633.,619.,393.,428.,27.,193.,66.,226.,1591.]
#产生微分
def getGrad(b,w):
    b_grad=0.0
    w_grad=0.0
    for i in range(10):
        b_grad+=(-2.0)*(y_data[i]-(b+w*x_data[i]))
        w_grad+=(-2.0)*(x_data[i])*(y_data[i]-(b+w*x_data[i]))
    return (b_grad,w_grad)
#生成一组b和w的数据图，方便给gradient descent的过程做标记
x=np.arange(-200,-100,1)#bias
y=np.arange(-5,5,0.1)#weight
z=np.zeros((len(y),len(x)))#color
X,Y=np.meshgrid(x,y)
for i in range(len(x)):
    for j in range(len(y)):
        b=x[i]
        w=y[j]
        z[j][i]=0
        for k in range(len(x_data)):
            z[j][i]+=(y_data[k]-(b+w*x_data[k]))**2
        z[j][i]/=len(x_data)
#y_data=b+w*x_data
b=-120#initial b
w=-4#inital w
b_history=[b]#记录迭代过程中的参数b值
w_history=[w]#记录迭代过程中的参数w值
#general gradient descent
'''
learningRate=0.00000001
iteration=1000000#迭代次数
for i in range(iteration):
    b_grad,w_grad=getGrad(b,w)
    b-=learningRate*b_grad
    w-=learningRate*w_grad
    b_history.append(b)
    w_history.append(w)
'''
#Adaptive gradient descent
learningRate=1
iteration=100000#迭代次数
lr_b=0
lr_w=0
for i in range(iteration):
    b_grad,w_grad=getGrad(b,w)
    lr_b+=b_grad**2
    lr_w+=w_grad**2
    b-=learningRate*b_grad/np.sqrt(lr_b)
    w-=learningRate*w_grad/np.sqrt(lr_w)
    b_history.append(b)
    w_history.append(w)
#plot the figure
plt.contourf(x,y,z,50,alpha=0.5,cmap=plt.get_cmap('jet'))
plt.plot([-188.4],[2.67],'x',ms=12,markeredgewidth=3,color='orange')
plt.plot(b_history,w_history,'o-',ms=3,lw=1.5,color='black')
plt.xlim(-200,-100)
plt.ylim(-5,5)
plt.title('iteration:%d'%iteration)
plt.xlabel(r'$b$',fontsize=16)
plt.ylabel(r'$w$',fontsize=16)
plt.show()
