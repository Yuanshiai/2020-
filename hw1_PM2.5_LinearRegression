import sys
import pandas as pd
import numpy as np
import math
import csv
data=pd.read_csv("D:\\ML_2020_dataSet\\数据\\hw1\\train.csv",encoding='big5')
data=data.iloc[:,3:]#只能按数值索引，限制索引的范围，行：0开始，列：3开始
data[data=='NR']=0
raw_data=data.to_numpy()
month_data={}
for month in range(12):
    sample=np.empty([18,480])
    for day in range(20):
        sample[:,day*24:(day+1)*24]=raw_data[18*(20*month+day):18*(20*month+day+1),:]
    month_data[month]=sample
x=np.empty([12*471,18*9],dtype=float)
y=np.empty([12*471,1],dtype=float)
for month in range(12):
    for day in range(20):
        for hour in range(24):
            if day==19 and hour>14:
                continue
            x[month*471+day*24+hour,:]=month_data[month][:,day*24+hour:day*24+hour+9].reshape(1,-1)
            y[month*471+day*24+hour,0]=month_data[month][9,day*24+hour+9]
#print(x)
#print(y)
#Normalization
mean_x=np.mean(x,axis=0)
std_x=np.std(x,axis=0)
for i in range(len(x)):
    for j in range(len(x[0])):
        if std_x[j]!=0:
            x[i,j]=(x[i,j]-mean_x[j])/std_x[j]
#Split Data into training Set and validation Set
x_train_set=x[:math.floor(len(x)*0.8),:]
y_train_set=y[:math.floor(len(y)*0.8),:]
x_validation_set=x[math.floor(len(x)*0.8):,:]
y_validation_set=y[math.floor(len(y)*0.8):,:]
dim=18*9+1
w=np.zeros((dim,1))
x_train_set=np.concatenate((np.ones((len(x_train_set),1)),x_train_set),axis=1).astype(float)
learning_rate=25
iter_time=1000
adagrad=np.zeros((dim,1))
eps=0.0000000001
for t in range(iter_time):
    loss=np.sqrt(np.sum(np.power(np.dot(x_train_set,w)-y_train_set,2))/(len(x_train_set)))
    if t%100==0:
        print(str(t)+':'+str(loss))
    gradient=2*np.dot(x_train_set.transpose(),np.dot(x_train_set,w)-y_train_set)
    adagrad+=gradient**2
    w-=learning_rate*gradient/np.sqrt(adagrad+eps)
#print(w)
#Validation
x_validation_set=np.concatenate((np.ones((len(x_validation_set),1)),x_validation_set),axis=1).astype(float)
Error=np.sum(np.power(np.dot(x_validation_set,w)-y_validation_set,2))/(len(y_validation_set))
print(Error)
'''
#Prediction
testdata=pd.read_csv("D:\\ML_2020_dataSet\\数据\\hw1\\test.csv",header=None,encoding='big5')
test_data=testdata.iloc[:,2:]
test_data[test_data=='NR']=0
test_data=test_data.to_numpy()
test_x=np.empty((240,18*9),dtype=float)
for i in range(240):
    test_x[i,:]=test_data[18*i:18*(i+1),:].reshape(1,-1)
for i in range(len(test_x)):
    for j in range(len(test_x[0])):
        if std_x[j]!=0:
            test_x[i,j]=(test_x[i,j]-mean_x[j])/std_x[j]
test_x=np.concatenate((np.zeros((240,1)),test_x),axis=1).astype(float)
ans_y=np.dot(test_x,w)
#Save Prediction to CSV File
with open("D:\\ML_2020_dataSet\\数据\\hw1\\submit.csv",mode='w',newline='') as  submit_file:
    csv_writer=csv.writer(submit_file)
    header=['id','value']
    print(header)
    csv_writer.writerow(header)
    for i in range(240):
        row=['id'+str(i),ans_y[i][0]]
        csv_writer.writerow(row)
        print(row)
'''
